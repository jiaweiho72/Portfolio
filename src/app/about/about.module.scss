.hover {
    transition: var(--transition-property) var(--transition-duration-micro-medium) var(--transition-timing-function);

    &:hover {
        transform: translateX(var(--static-space-4));
    }
}

@media (--s) {
    .textAlign {
        text-align: center;
    }

    .blockAlign {
        align-self: center;
        // position: fixed;
        // right:"100%"
    }
}

// @media (max-width: 600px) { // Use a sensible breakpoint, e.g., 600px
//     .small {
//         display: none; /* Hides the component */
//         background-color: red; /* Optional: Just to visualize if needed */
//     }
// }

.small {
    // background-color: red; /* Make it red to see it easily */
    // color: white; /* Change text color for contrast */
    // padding: 20px; /* Add some padding */
    // text-align: center; /* Center the text */
    display: flex; /* Assuming it's a flex container since you use 'direction' and 'alignItems' */
    flex-direction: column; /* Equivalent to direction="column" */
    align-items: center; /* Equivalent to alignItems="center" */
    min-width: 160px; /* Set minimum width */
    padding-bottom: var(--spacing-xl); /* Use a CSS variable for padding, adjust accordingly */
    position: fixed; /* Fixed position */
    // left: 10%; /* Position from the left */
    left: 50%; /* Center horizontally */
    transform: translateX(-270%); /* Shift left to center */
    white-space: nowrap; /* Prevent text from wrapping */
    gap: 24px;
    @media (max-width: 1200px) {
        display: none;
        // padding-left: 500px; // Zero padding for screens 1200px and smaller
    }
}


.alignment {
    padding-left: 345px; // High padding for larger screens
    // left: 50%; /* Center horizontally */
    // transform: translateX(+10%);

    @media (max-width: 1200px) {
        padding-left: 0; // Zero padding for screens 1200px and smaller
        // transform: translateX(0);
    }
}
